scalar DateTime
scalar Long

enum Season {
  WINTER
  FALL
  SUMMER
  SPRING
}

enum Role {
  GUEST
  MEMBER
  ADMIN
  OWNER
}

enum WatchStatusType {
  IN_PROGRESS
  COMPLETED
}

type Query {
  setup: Boolean!

  configuration(key: String!): String

  user(email: String): User
  users: [User!]!

  session: UserSession

  series(id: ID!): Series
  serieses: [Series!]!

  episode(id: ID!): Episode
  episodes: [Episode!]!

  file(id: ID!): File
  files: [File!]!

  progress: [WatchProgress!]!

  fileSources: [FileSource!]!
  seriesTypes: [SeriesType!]!
  watchStatuses: [WatchStatus!]!

  suggestedCodecs: [String!]!
  suggestedSources: [String!]!
}

interface SessionData {
  id: ID!
  email: String!
  name: String
  role: Role!
}

type UserSession implements SessionData {
  id: ID!
  email: String!
  name: String
  role: Role!
}

type User implements SessionData {
  id: ID!
  email: String!
  name: String
  role: Role!
  progress: [WatchProgress!]!
}

type Series {
  id: ID!
  title: String!
  alternativeTitles: [String!]!
  type: SeriesType!
  seasonNumber: Int!
  episodes: [Episode!]!
  status: String!
  releaseYear: Int
  releaseSeason: Season
  remarks: String
  prequels: [Series!]!
  sequels: [Series!]!
  mainStories: [Series!]!
  sideStories: [Series!]!
  relatedSeries: [Series!]!
  references: [Reference!]!
  progress: WatchProgress
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Reference {
  id: ID!
  link: String!
  source: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SeriesType {
  id: ID!
  type: String!
  series: [Series!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Episode {
  id: ID!
  title: String!
  alternativeTitles: [String!]!
  series: Series!
  episodeNumber: Int!
  files: [File!]!
  remarks: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type File {
  id: ID!
  episode: Episode!
  path: String!
  checksum: String!
  fileSize: Long!
  duration: Int!
  resolutionHeight: Int!
  resolutionWidth: Int!
  codec: String!
  source: FileSource!
  remarks: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type FileSource {
  id: ID!
  source: String!
  files: [File!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type WatchProgress {
  id: ID!
  series: Series!
  user: User!
  status: WatchStatus!
  completed: Int
  overall: Int
  execution: Int
  story: Int
  sound: Int
  art: Int
  character: Int
  appeal: Int
  remarks: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type WatchStatus {
  id: ID!
  status: String!
  color: String!
  progresses: [WatchProgress!]!
  type: WatchStatusType
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Mutation {
  setup(input: SetupInput!): Boolean!

  setConfiguration(input: SetConfigurationInput!): String!

  createSeriesType(input: CreateSeriesTypeInput!): SeriesType!
  updateSeriesType(id: ID!, input: UpdateSeriesTypeInput!): SeriesType!
  deleteSeriesType(id: ID!): ID!

  createFileSource(input: CreateFileSourceInput!): FileSource!
  updateFileSource(id: ID!, input: UpdateFileSourceInput!): FileSource!
  deleteFileSource(id: ID!): ID!

  createWatchStatus(input: CreateWatchStatusInput!): WatchStatus!
  updateWatchStatus(id: ID!, input: UpdateWatchStatusInput!): WatchStatus!
  deleteWatchStatus(id: ID!): ID!

  setDefaultWatchStatus(input: SetDefaultWatchStatusInput!): WatchStatus

  createSession(input: CreateSessionInput!): UserSession!
  deleteSession: Boolean!

  createUser(input: CreateUserInput!): User!
  updateUser(email: String!, input: UpdateUserInput!): User!
  deleteUser(email: String!): ID!

  updatePassword(email: String!, input: UpdatePasswordInput!): Boolean!

  createSeries(input: CreateSeriesInput!): Series!
  updateSeries(id: ID!, input: UpdateSeriesInput!): Series!
  deleteSeries(id: ID!): ID!

  createEpisode(input: CreateEpisodeInput!): Episode!
  updateEpisode(id: ID!, input: UpdateEpisodeInput!): Episode!
  deleteEpisode(id: ID!): ID!

  createFile(input: CreateFileInput!): File!
  updateFile(id: ID!, input: UpdateFileInput!): File!
  deleteFile(id: ID!): ID!

  createWatchProgress(input: CreateWatchProgressInput!): WatchProgress!
  updateWatchProgress(id: ID!, input: UpdateWatchProgressInput!): WatchProgress!
  deleteWatchProgress(id: ID!): ID!
}

input SetupInput {
  email: String!
  password: String!
  name: String
}

input SetConfigurationInput {
  key: String!
  value: String
}

input CreateSeriesTypeInput {
  type: String!
}

input UpdateSeriesTypeInput {
  type: String
}

input CreateFileSourceInput {
  source: String!
}

input UpdateFileSourceInput {
  source: String
}

input CreateWatchStatusInput {
  status: String!
  color: String!
  type: WatchStatusType
}

input UpdateWatchStatusInput {
  status: String
  color: String
  type: WatchStatusType
}

input SetDefaultWatchStatusInput {
  id: ID
  type: WatchStatusType!
}

input CreateSessionInput {
  email: String!
  password: String!
}

input CreateUserInput {
  email: String!
  password: String!
  name: String
  role: Role!
}

input UpdateUserInput {
  email: String
  name: String
  role: Role
}

input UpdatePasswordInput {
  oldPassword: String!
  newPassword: String!
}

input CreateSeriesInput {
  title: String!
  alternativeTitles: [String!]!
  type: ID!
  release: ReleaseDateInput!
  remarks: String
  prequels: [ID!]!
  sequels: [ID!]!
  mainStories: [ID!]!
  sideStories: [ID!]!
  relatedSeries: [ID!]!
  references: [ReferenceInput!]!
}

input UpdateSeriesInput {
  title: String
  alternativeTitles: [String!]
  type: ID
  release: ReleaseDateInput
  remarks: String
  prequels: [ID!]
  sequels: [ID!]
  mainStories: [ID!]
  sideStories: [ID!]
  relatedSeries: [ID!]
  references: [ReferenceInput!]
}

# If ReleaseDateInput is not null but contents are null, then fields are removed.
input ReleaseDateInput {
  year: Int
  season: Season
}

input ReferenceInput {
  id: ID
  link: String!
  source: String!
}

input CreateEpisodeInput {
  title: String!
  series: ID!
  alternativeTitles: [String!]!
  episodeNumber: Int!
  remarks: String
}

input UpdateEpisodeInput {
  title: String
  series: ID
  alternativeTitles: [String!]
  episodeNumber: Int
  remarks: String # Set to "" to remove existing comments.
}

input CreateFileInput {
  episode: ID!
  path: String!
  checksum: String!
  fileSize: Long!
  duration: Int!
  resolutionHeight: Int!
  resolutionWidth: Int!
  codec: String!
  source: ID!
  remarks: String
}

input UpdateFileInput {
  episode: ID
  path: String
  checksum: String
  fileSize: Long
  duration: Int
  resolutionHeight: Int
  resolutionWidth: Int
  codec: String
  source: ID
  remarks: String # Set to "" to remove existing comments.
}

input CreateWatchProgressInput {
  series: ID!
  status: ID!
  completed: Int!
  rating: RatingInput
  remarks: String
}

input UpdateWatchProgressInput {
  series: ID
  status: ID
  completed: Int
  rating: RatingInput # Set to empty object to remove rating.
  remarks: String # Set to "" to remove existing comments.
}

input RatingInput {
  overall: Int
  execution: Int
  story: Int
  sound: Int
  art: Int
  character: Int
  appeal: Int
}
