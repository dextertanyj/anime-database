// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Season {
  WINTER
  FALL
  SUMMER
  SPRING
}

enum Role {
  GUEST
  MEMBER
  ADMIN
  OWNER
}

enum WatchStatusType {
  IN_PROGRESS
  COMPLETED
}

model Configuration {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String          @id @default(cuid())
  email         String          @unique
  name          String?
  password      String
  role          Role
  progresses    WatchProgress[]
  loginAttempts LoginAttempt[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model LoginAttempt {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  ipAddress String
  success   Boolean
  createdAt DateTime @default(now())
}

model Series {
  id                  String          @id @default(cuid())
  title               String          @db.Text
  alternativeTitles   String[]
  type                SeriesType      @relation(fields: [seriesTypeId], references: [id])
  seriesTypeId        String
  episodes            Episode[]
  releaseYear         Int?
  releaseSeason       Season?
  remarks             String?         @db.Text
  prequels            Series[]        @relation("prequel-sequel")
  sequels             Series[]        @relation("prequel-sequel")
  mainStories         Series[]        @relation("main-side")
  sideStories         Series[]        @relation("main-side")
  relatedSeries       Series[]        @relation("alternative")
  relatedAlternatives Series[]        @relation("alternative")
  references          Reference[]
  progresses          WatchProgress[]
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
}

model Reference {
  id       String @id @default(cuid())
  series   Series @relation(fields: [seriesId], references: [id])
  seriesId String
  link     String @db.Text
  source   String
}

model SeriesType {
  id        String   @id @default(cuid())
  type      String   @unique
  series    Series[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Episode {
  id                String   @id @default(cuid())
  title             String   @db.Text
  series            Series   @relation(fields: seriesId, references: id)
  seriesId          String
  alternativeTitles String[]
  episodeNumber     Int
  files             File[]
  remarks           String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model File {
  id               String     @id @default(cuid())
  episode          Episode    @relation(fields: [episodeId], references: [id])
  episodeId        String
  path             String     @db.Text
  checksum         String
  fileSize         BigInt     @db.BigInt
  duration         Int
  resolutionHeight Int
  resolutionWidth  Int
  codec            String
  source           FileSource @relation(fields: [fileSourceId], references: [id])
  fileSourceId     String
  remarks          String?    @db.Text
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

model FileSource {
  id        String   @id @default(cuid())
  source    String   @unique
  file      File[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WatchProgress {
  id            String      @id @default(cuid())
  series        Series      @relation(fields: [seriesId], references: [id])
  seriesId      String
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  status        WatchStatus @relation(fields: [watchStatusId], references: [id])
  watchStatusId String
  completed     Int         @default(0)
  overall       Int?
  execution     Int?
  story         Int?
  sound         Int?
  art           Int?
  character     Int?
  appeal        Int?
  remarks       String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([seriesId, userId])
}

model WatchStatus {
  id         String           @id @default(cuid())
  status     String           @unique
  progresses WatchProgress[]
  type       WatchStatusType? @unique
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
}
